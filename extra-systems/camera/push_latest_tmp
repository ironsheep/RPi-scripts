#!/bin/bash
SCRIPT=${0##*/}
SCRIPT_VERSION="1.0"

TARGET_HOST=pimon1.home

# =============================================================================
# Usage info
#
show_help() {
	# takes $1 as as desired exit code
ERROR_LEVEL=$1
cat  >&2 << EOF

Usage: ${SCRIPT} [-dhv] 

 $SCRIPT v${SCRIPT_VERSION} send the most recent camera image to ${TARGET_HOST}
 
where:
    -h          Display this (h)elp and exit
    -d          Enable script-(d)ebug output
    -v          Enable (v)erbose mode. Can be used multiple times for increased
                 verbosity.
                 
Typical Use Cases:

	${SCRIPT} -h     		    # display this help text 
	
EOF
	exit ${ERROR_LEVEL}
}

# =============================================================================
#  Simple message printing functions
#
warningMessage () {
# takes $1 as message text
	MESSAGE=$1
	echo "${SCRIPT}:WARNING- ${MESSAGE}" >&2
}

warningTimedMessage () {
# takes $1 as message text
	NOWHHMM=`date +%H:%M:%S`
	MESSAGE=$1
	echo "${SCRIPT}:WARNING- ${MESSAGE}: ${NOWHHMM}" >&2
}

infoMessage () {
# takes $1 as message text
	MESSAGE=$1
	echo "${SCRIPT}:INFO- ${MESSAGE}" >&2
}

errorMessage () {
# takes $1 as message text
	MESSAGE=$1
	echo "${SCRIPT}:ERROR- ${MESSAGE}" >&2
}

fatalMessage () {
# takes $1 as message text and $2 as exit code
	MESSAGE=$1
	ERROR_LEVEL=$2
	errorMessage "${MESSAGE}"
	exit ${ERROR_LEVEL}
}

debugMessage () {
# takes $1 as message text and (optional) $2 as gating debug level
#  ONLY displays message if DEBUG is enabled
## TODO add gating level logic
	MESSAGE=$1
	GATING_LEVEL=$2
	if [ -n "${DEBUG}" ]; then
		echo "${SCRIPT}(DBG): ${MESSAGE}" >&2
	fi
}

progressMessage () {
# takes $1 as message text
	MESSAGE=$1
	echo "${SCRIPT}: ${MESSAGE}" 
}

verboseMessage () {
# takes $1 as message text and $2 as gating verbose level
#   if gating <= current then display message
## TODO add gating level logic
	MESSAGE=$1
	GATING_LEVEL=$2
	#echo "${SCRIPT}:Verbose(${GATING_LEVEL})- ${MESSAGE}" >&2
	
	if [ ${VERBOSE_LEVEL} -gt 0 ]; then
		echo "${SCRIPT}:Verbose- ${MESSAGE}" >&2
	fi
}

verboseTimedMessage () {
# takes $1 as message text and $2 as gating verbose level
#   if gating <= current then display message
## TODO add gating level logic
	MESSAGE=$1
	GATING_LEVEL=$2
	NOWHHMM=`date +%H:%M:%S`
	#echo "${SCRIPT}:Verbose(${GATING_LEVEL})- ${MESSAGE}" >&2
	
	if [ ${VERBOSE_LEVEL} -gt 0 ]; then
		echo "${SCRIPT}:Verbose- ${MESSAGE}: ${NOWHHMM}" >&2
	fi
}



# =============================================================================
# Initialize our variables
#
export DEBUG=""
export DEBUG_LEVEL=0
export VERBOSE_LEVEL=0
export UNDER_AUTOMATOR=0
export CATCH_UP=""

# =============================================================================
#  Process the command line arguments
#
OPTIND=1 # Reset is necessary if getopts was used previously in the script.  It is a good idea to make this local in a function.
while getopts "chdv" opt; do
    case "$opt" in
        h)
            show_help 0
            ;;
        c)
        	export CATCH_UP=yes
        	;;
        d)
        	  export DEBUG_LEVEL=$((DEBUG_LEVEL+1))
        	  export DEBUG=yes
        	  if [ ${DEBUG_LEVEL} -eq 1 ]; then
        	  	# when first setting debug set this too
        	  	export VERBOSE_LEVEL=$((VERBOSE_LEVEL+1))
        	  fi
            ;;
        v)
        	  export VERBOSE_LEVEL=$((VERBOSE_LEVEL+1))
        	  debugMessage "verbose set to ${VERBOSE_LEVEL}!"
            ;;
        '?')
        	  echo "$SCRIPT: Question Mark!" >&2
            show_help 0
            ;;
    esac
done

shift "$((OPTIND-1))" # Shift off the options and optional --.

TARGET_DIR=/var/www/html/kiosk/camera0
TMP_DIR=~/tmp
mkdir -p ${TMP_DIR}

TARGET_FILENAME_FILE=${TARGET_DIR}/filename.dat
TMP_FILENAME_FILE=${TMP_DIR}/filename.dat

TMP_IMAGE_DIR=/tmp/motion

#IMAGE_FILENAME=`find ${TMP_IMAGE_DIR} -name '*.jpg' | tail -1`
#IMAGE_FSPEC=${IMAGE_FILENAME}

# -----------------------------------------------------------------------------

TODAY=`/bin/date +%Y%m%d`
debugMessage "TODAY=[${TODAY}]"
IMAGE_FSPEC=`/usr/bin/find ${TMP_IMAGE_DIR} -name "*${TODAY}*.jpg" | sort -n | tail -1`
debugMessage "IMAGE_FSPEC=[${IMAGE_FSPEC}]"

# -----------------------------------------------------------------------------

if [ -n "${IMAGE_FSPEC}" ]; then
	if [ -f "${IMAGE_FSPEC}" ]; then
	  scp -p ${IMAGE_FSPEC} pi@${TARGET_HOST}:${TARGET_DIR}
	  IMAGE_BASENAME=`basename ${IMAGE_FSPEC}`
	  echo ${IMAGE_BASENAME} >${TMP_FILENAME_FILE}
	  scp -p ${TMP_FILENAME_FILE} pi@${TARGET_HOST}:${TARGET_FILENAME_FILE}
	else
	  echo "$SCRIPT: ERROR- file [${IMAGE_FSPEC}] not found, can't copy file!" >&2
	fi
else 
  echo "$SCRIPT: ERROR- no filename, can't copy file!" >&2
  exit 1
fi

exit 0



