#!/bin/bash
SCRIPT=${0##*/}
SCRIPT_VERSION="1.0"

# =============================================================================
# Usage info
#
show_help() {
	# takes $1 as as desired exit code
ERROR_LEVEL=$1
cat  >&2 << EOF

Usage: ${SCRIPT} [-dhv] 

 $SCRIPT v${SCRIPT_VERSION} process and archive an hours\' worth of jpg/avi files sent by picam-wifi
 
where:
    -c          Catch up sending and removing tarballs only
    -h          Display this (h)elp and exit
    -d          Enable script-(d)ebug output
    -v          Enable (v)erbose mode. Can be used multiple times for increased
                 verbosity.
                 
Typical Use Cases:

	${SCRIPT} -h     		    # display this help text 
	
EOF
	exit ${ERROR_LEVEL}
}

# =============================================================================
#  Simple message printing functions
#
warningMessage () {
# takes $1 as message text
	MESSAGE=$1
	echo "${SCRIPT}:WARNING- ${MESSAGE}" >&2
}

warningTimedMessage () {
# takes $1 as message text
	NOWHHMM=`date +%H:%M:%S`
	MESSAGE=$1
	echo "${SCRIPT}:WARNING- ${MESSAGE}: ${NOWHHMM}" >&2
}

infoMessage () {
# takes $1 as message text
	MESSAGE=$1
	echo "${SCRIPT}:INFO- ${MESSAGE}" >&2
}

errorMessage () {
# takes $1 as message text
	MESSAGE=$1
	echo "${SCRIPT}:ERROR- ${MESSAGE}" >&2
}

fatalMessage () {
# takes $1 as message text and $2 as exit code
	MESSAGE=$1
	ERROR_LEVEL=$2
	errorMessage "${MESSAGE}"
	exit ${ERROR_LEVEL}
}

debugMessage () {
# takes $1 as message text and (optional) $2 as gating debug level
#  ONLY displays message if DEBUG is enabled
## TODO add gating level logic
	MESSAGE=$1
	GATING_LEVEL=$2
	if [ -n "${DEBUG}" ]; then
		echo "${SCRIPT}(DBG): ${MESSAGE}" >&2
	fi
}

progressMessage () {
# takes $1 as message text
	MESSAGE=$1
	echo "${SCRIPT}: ${MESSAGE}" 
}

verboseMessage () {
# takes $1 as message text and $2 as gating verbose level
#   if gating <= current then display message
## TODO add gating level logic
	MESSAGE=$1
	GATING_LEVEL=$2
	#echo "${SCRIPT}:Verbose(${GATING_LEVEL})- ${MESSAGE}" >&2
	
	if [ ${VERBOSE_LEVEL} -gt 0 ]; then
		echo "${SCRIPT}:Verbose- ${MESSAGE}" >&2
	fi
}

verboseTimedMessage () {
# takes $1 as message text and $2 as gating verbose level
#   if gating <= current then display message
## TODO add gating level logic
	MESSAGE=$1
	GATING_LEVEL=$2
	NOWHHMM=`date +%H:%M:%S`
	#echo "${SCRIPT}:Verbose(${GATING_LEVEL})- ${MESSAGE}" >&2
	
	if [ ${VERBOSE_LEVEL} -gt 0 ]; then
		echo "${SCRIPT}:Verbose- ${MESSAGE}: ${NOWHHMM}" >&2
	fi
}



# =============================================================================
# Initialize our variables
#
export DEBUG=""
export DEBUG_LEVEL=0
export VERBOSE_LEVEL=0
export UNDER_AUTOMATOR=0
export CATCH_UP=""

# =============================================================================
#  Process the command line arguments
#
OPTIND=1 # Reset is necessary if getopts was used previously in the script.  It is a good idea to make this local in a function.
while getopts "chdv" opt; do
    case "$opt" in
        h)
            show_help 0
            ;;
        c)
        	export CATCH_UP=yes
        	;;
        d)
			export DEBUG_LEVEL=$((DEBUG_LEVEL+1))
			export DEBUG=yes
			if [ ${DEBUG_LEVEL} -eq 1 ]; then
				# when first setting debug set this too
				export VERBOSE_LEVEL=$((VERBOSE_LEVEL+1))
			fi
			;;
        v)
			export VERBOSE_LEVEL=$((VERBOSE_LEVEL+1))
			debugMessage "verbose set to ${VERBOSE_LEVEL}!"
			;;
        '?')
			echo "$SCRIPT: Question Mark!" >&2
			show_help 0
			;;
    esac
done

shift "$((OPTIND-1))" # Shift off the options and optional --.

if [ -n "${CATCH_UP}" ]; then
	progressMessage "* Running in CATCH UP mode..."
fi

# =============================================================================
#  final checks and setup before execution
#

HOSTNAME=`uname -n`
HOME_PI=pimon1

# files arrive here from cam (md5 and tar.gz pairs)
SRC_DIR="/var/status/picam/fileXfer"
if [ ! -d ${SRC_DIR} ]; then
	fatalMessage "REQUIRED DIR MISSING - SRC_DIR=[${SRC_DIR}], abort!" 1
fi

# files get moved here after tarball being md5 sum-checked and GOOD reported back to picam
INCOMING_DIR="/var/status/picam/readyForUnpack"
mkdir -p ${INCOMING_DIR}
if [ ! -d ${INCOMING_DIR} ]; then
	fatalMessage "failed to create INCOMING_DIR [${INCOMING_DIR}], abort!" 1
fi

# unpacked files get archived here once verified
DST_DIR="/media/data/archive/cameras/cam0/byDate"
if [ ! -d "${DST_DIR}" ]; then
	fatalMessage "REQUIRED DIR MISSING - DST_DIR=[${DST_DIR}], abort!" 1
fi

# place for our xfer files until they age-out
WEEK_HOLD_DIR=/media/data/weekHold
if [ ! -d "${WEEK_HOLD_DIR}" ]; then
	fatalMessage "REQUIRED DIR MISSING - WEEK_HOLD_DIR=[${WEEK_HOLD_DIR}], abort!" 1
fi

NOW=`date +%y%m%d-%H%M%S`

WORK_DIR="/tmp/unpack-${NOW}"
mkdir -p ${WORK_DIR}
if [ ! -d ${WORK_DIR} ]; then
	fatalMessage "failed to create WORK_DIR [${WORK_DIR}], abort!" 1
fi

# =============================================================================
#  FUNCTIONS
#
processSendFiles () {
	#  - (1) verify sum and generate GOOD copy flag file for picam to pick up
	for SEND_FILENAME in `find . -type f -name '*.tar.sum' -print | sort -n`; do
		debugMessage "SEND_FILENAME=[${SEND_FILENAME}]"
		SEND_FILEKEY=`basename ${SEND_FILENAME} .tar.sum`
		if [ -z "${SEND_FILEKEY}" ]; then
			cd ${STARTING_DIR}
			fatalMessage "failed to determine FILE KEY, abort!" 1
		fi
		debugMessage "SEND_FILEKEY=[${SEND_FILEKEY}]"
		
		CHECK_FILE="${SEND_FILEKEY}.check-status"
		
		# remove any prior result files for this key
		RSLT_SUFFIX_GOOD=".goodResult"
		RSLT_SUFFIX_BAD=".badResult"
		OLD_FILE1="${SEND_FILEKEY}${RSLT_SUFFIX_BAD}"
		if [ -f ${OLD_FILE1} ]; then
			(set -x; rm -f ${OLD_FILE1})
		fi
		OLD_FILE2="${SEND_FILEKEY}${RSLT_SUFFIX_GOOD}"
		if [ -f ${OLD_FILE2} ]; then
			(set -x; rm -f ${OLD_FILE2})
		fi
	
		# determine and write new result file for this key
		(set -x;md5sum -c ${SEND_FILEKEY}.tar.sum >${CHECK_FILE})
		CHK_RSLT=`cat ${CHECK_FILE} | awk '{ print $2 }'`
		debugMessage "CHK_RSLT=[${CHK_RSLT}]"
		
		RSLT_SUFFIX=${RSLT_SUFFIX_GOOD}
		if [ "${CHK_RSLT}" = "OK" ]; then
			debugMessage "[${CHK_RSLT}] good send!"
		else
			debugMessage "[${CHK_RSLT}] BAD send"
			RSLT_SUFFIX=${RSLT_SUFFIX_BAD}
		fi
		
		# move our check results to final file name
		RSLT_FILE="${SEND_FILEKEY}${RSLT_SUFFIX}"
		debugMessage "RSLT_FILE=[${RSLT_FILE}]"
		mv ${CHECK_FILE} ${RSLT_FILE}
		
	
		if [ "${RSLT_SUFFIX}" = "${RSLT_SUFFIX_BAD}" ]; then
			progressMessage "CHECKSUM FAIL - bad .tar.gz file copy, abort!"
	    else
			progressMessage "CHECKSUM GOOD Moving files of ${SEND_FILEKEY}"
			# move files to incoming now that we know we like them
			(set -x; mv ${SEND_FILEKEY}.tar.sum ${SEND_FILEKEY}.sum ${SEND_FILEKEY}.tar.gz  ${INCOMING_DIR})
			#exit 20;	# break so we can certify first run
		fi
	
	done
	
	if [ -n "${DEBUG}" ]; then
		ls -l *Result
	fi
}


#
# =============================================================================

STARTING_DIR=`pwd`

#
# move into soure dir and check received files
#
cd ${SRC_DIR}
# - locate any files waiting to processed
# - if camera took action then remove flags for camera
DONE_FILES_CT=`ls -1 *.done 2>/dev/null | wc -l`
debugMessage "DONE_FILES_CT=[${DONE_FILES_CT}]"
if [ "${DONE_FILES_CT}" -gt 0 ]; then
	debugMessage "we have DONE files let's handle them"
	for DONEFIL in `ls -1 *.done`; do
		THISKEY=`basename ${DONEFIL} .done`
		debugMessage "THISKEY=[${THISKEY}]"
		(set -x;rm -f "${DONEFIL}" "${THISKEY}.goodResult")
	done
else 
	debugMessage "No DONE files to be processed, moving on..."
fi

#  - if found one let's process it and then be done

#ls -1 *.tar.sum  2>/dev/null
SEND_FILES_CT=`ls -l *.tar.sum 2>/dev/null | wc -l`
debugMessage "SEND_FILES_CT=[${SEND_FILES_CT}]"
if [ "${SEND_FILES_CT}" -gt 0 ]; then
	debugMessage "> 0!"
	processSendFiles
else 
	debugMessage "No files to be processed, Done"
fi

# =============================================================================

if [ -n "${CATCH_UP}" ]; then

	infoMessage "CATCH UP mode, early exit" 
	exit 0;
fi

# =============================================================================

if [ -z "${SEND_FILEKEY}" ]; then
	# above key found no incoming files so let's use earliest left laying around
	SEND_FILENAME=`ls -1t ${INCOMING_DIR}/*.tar.sum | tail -1`
	debugMessage "SEND_FILENAME=[${SEND_FILENAME}]"
	SEND_FILEKEY=`basename ${SEND_FILENAME} .tar.sum`
	debugMessage "SEND_FILEKEY=[${SEND_FILEKEY}]"
	if [ -z "${SEND_FILEKEY}" ]; then
		cd ${STARTING_DIR}
		progressMessage "No pending .tar.sum files to be unpacked, Done"	
		exit 0;
	fi
fi


# =============================================================================

progressMessage "Move into ${WORK_DIR} to process files"
cd ${WORK_DIR}

#  - (2) go unpack files and archive them
(set -x; tar -xzf "${INCOMING_DIR}/${SEND_FILEKEY}.tar.gz")
debugMessage "Unpacked files in dir=[${WORK_DIR}]"

KEYFILES_ROOTDIR="${WORK_DIR}/tmp/motion"

DST_DIR="/media/data/archive/cameras/cam0/byDate"

if [ -d "${KEYFILES_ROOTDIR}" ]; then
	for FTYPE in "jpg" "avi"; do
		for PIC in `find ${KEYFILES_ROOTDIR} -name "*.${FTYPE}"`; do
			PICNAME=`basename "${PIC}"`
			REGEXP="^[0-9]{1,3}\-([0-9]{4,4})([0-9]{2,2})([0-9]{2,2}).*$"
			#debugMessage "pic=${PICNAME}"
			[[ ${PICNAME} =~ ${REGEXP} ]] 
			year=${BASH_REMATCH[1]}
			month=${BASH_REMATCH[2]}
			day=${BASH_REMATCH[3]}
			#debugMessage "  yyyy=${year}, mm=${month}, dd=${day}"
			
			TARGET_DIR="${DST_DIR}/${year}/${month}/${day}"
			#debugMessage "TARGET_DIR=[${TARGET_DIR}]"
			TARGET_FILE="${TARGET_DIR}/${PICNAME}"
			#debugMessage "TARGET_FILE=[${TARGET_FILE}]"
			#continue
			
			if [ ! -d ${TARGET_DIR} ]; then
				(set -x;mkdir -p "${TARGET_DIR}")
				if [ ! -d ${TARGET_DIR} ]; then
					fatalMessage "Failed to create ${TARGET_DIR}, Abort!" 1
				fi
			fi
			# this is a known good file move it unconditionally
			(set -x;sudo mv ${PIC} ${TARGET_DIR})
			# conditionally move file (if not already there)
			#if [ ! -f "${TARGET_FILE}" ]; then
			#   (set -x;sudo mv ${PIC} ${TARGET_DIR})
			#else
			#   echo "$SCRIPT: Skipping file [${PICNAME}] already in target locn" >&2
			#fi
			if [ ! -f "${TARGET_FILE}" ]; then
				cd ${STARTING_DIR}
				fatalMessage "FILE MOVE FAIL - file didn't arrive at target location [${TARGET_FILE}], abort!" 1
			fi
		done
	done
else 
	progressMessage "Skipping file archiving for EMPTY .tar.gz file"
fi

# fail if remaining is NOT empty dir tree
REMAINING_FILES_CT=`find ${KEYFILES_ROOTDIR} -type f | wc -l`
debugMessage "REMAINING_FILES_CT=[${REMAINING_FILES_CT}]"
if [ "${REMAINING_FILES_CT}" -gt 0 ]; then
	cd ${STARTING_DIR}
	fatalMessage "FILE MOVE FAIL - some files didn't get archived, abort!" 1
fi

# leave our temp dir
progressMessage "Return to ${SRC_DIR} procesed the files"
cd ${SRC_DIR}
# remove temp dir (empty dir tree)
(set -x; rm -rf "${WORK_DIR}")
#debugMessage "would removed empty dir ${WORK_DIR}"

#  - (3) tmp archive source files (keep for 1 week then delete?)

(set -x;mv ${INCOMING_DIR}/${SEND_FILEKEY}*.gz ${INCOMING_DIR}/${SEND_FILEKEY}*.sum ${WEEK_HOLD_DIR})

cd ${STARTING_DIR}

